RNA
{A,U,C,G}
1. A-U ; C-G
2. no sharp turns : match i & j, i<j-4
3. node can't match to multiple node
4. march can't cross : ex. 1-3 2-4 

OPT(i,j) = max number of pair between i to j satisfy four RNA condition

if n have no pair => OPT(1,n) = OPT(1,n-1)
if n have pair with t => OPT(1,n) = OPT(1,t-1) + OPT(t+1,n-1) + 1
where 1 <= t < n-4


DP algorithm(dynamic programming)
initialize OPT(i,j)<-0 where i>=j-4;
for k<-5,6,..,n-1
	for i<-1,2,..,n-k
		j=i+k
		OPT(i,j) = max{OPT(i,j-1), max(1+OPT(i,t-1)+OPT(t+1,j-1))}
return OPT(1,n)


global alignment
def
1. two sequence have same length
2. not allow dash at same position for both sequence
3. remove dash will get original sequence
scoring scheme/matrix
	for example
	  A C G T -
	A 5 1 1 1 0
	C 1 5 1 1 0
	G 1 1 5 1 0
	T 1 1 1 5 0
	- 0 0 0 0 0


local alignment
=> do global alignment for sub-sequence
	
--------------------------------------------------------------------------------------
homework

1. 
2. 3 13
3. infinite
4. 2+2+-4+-4+2+5 = 3
5. AC & GG
6. m,n = m-1,n + m,n-1 + m-1,n-1  -> remove last pair with (a -) (- b) (a b) 
7. m-1,n + m,n-1 + m-1,n-1
8. Xi-1 - / - Yj-1 / max{S + Xi-1,Yj-1 ..}
9. 
10. mn
11. ??
12. 0 0 14

		0 1  2  3  4
	0	0 0  0  0  0
	1	0 4 10 10 10
	2	0 4 14 20 20 


13. 20
14. 2,3 -> 0,1
15. 
16. mn
17. true


[CompiteGlobalAlignmentScores]
m <- |X| ;  <- |Y|
S[0,0] <- 0
For i=1~m
	S[i,0] = M[Xi-1,-]
For j=1~n
	S[0,j] = M[-,Yj-1]
For i=1~m
	for j=1~n
		S[i,j] = max{
					S[i-1,j-1] + M[Xi-1,Yj-1]
					S[i-1,j] + M[Xi-1,-]
					S[i,j-1] + M[-,Yj-1]
return S
=> for local pairwise : update M[a,b] to 0 if M[a,b]<0

	
[ComputeAlignment]
i<-|X| ; j<=|Y|
X` = []
Y` = []
white i!=0 and j!=0
	if S[i,j] = S[i-1,j-1] + M
		X` += Xi-1
		Y` += Yj-1
		i--
		j--
	elseif S[i,j] = S[i-1,j] + M
		X` += Xi-1
		Y` += -
		i--
	elseif S[i,j] = S[i,j-1] + M
		X` += -
		Y` += Yj-1
		j--
		
while i!=0
	X` = Xi-1 + X'
	Y` = - + Y`
	i--
while j!=0
	X` = - + X'
	Y` = Yj-1 + Y`
	j--
return X` Y`
=> for local pairwise : stop traceback when score = 0
























	
	
	
	
	
	
	